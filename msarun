#!/usr/bin/env bash
# Multiple Sequence Alignment controller script.
# @author Rodrigo Siqueira <rodriados@gmail.com>
# @copyright 2018-2019 Rodrigo Siqueira

# Declaring software version
readonly version="msa 0.1.1"

# Creates a new named pipe and returns its name. The pipe allows to stablish
# communication to and from an external process.
createpipe()
{
    # Creates a named pipe. The name of the pipe will simply be that of a
    # temporary file, which not forceably exists.
    local pipe=$(mktemp -u)
    mkfifo $pipe

    # Return the name of pipe created.
    echo $pipe
}

# Lists all available command line options and shows information about them,
# letting the user know what is the use of this script.
showhelp()
{
    echo "Usage: msarun [options] files..."
    echo "Options:"
    echo "  -h, --help                  Prints this information."
    echo "  -v, --version               Prints the software version."
    echo "  -m, --multigpu              Try to use multiple devices in a single host."
    echo "  -x, --matrix    <matrix>    The scoring matrix to use for alignment."
    echo "  -H, --hostfile  <hostfile>  The cluster configuration file."
    echo "  -1, --pairwise  <algorithm> The algorithm to use in pairwise module."
    echo "  -2, --phylotree <algorithm> The algorithm to use in phylogenetic tree module."
}

# Initializing command line variables and flags
hostfile=
msaargs=()

# Parses the command line options and sets all respective variables. Any positional
# value unlinked to any option sent will also be captured.
while [ $# -gt 0 ]; do
    case $1 in
        -h | --help     ) showhelp;             exit  0 ;;
        -v | --version  ) echo "$version";      exit  0 ;;
        -H | --hostfile ) hostfile="$2";        shift 2 ;;
        *               ) msaargs+=("$1");      shift   ;;
    esac
done

# Discovers the name of hostfile to be used. If no valid file name is given,
# the name is defaulted to "hostfile".
if [[ -z "$hostfile" || (-e "$hostfile" && ! -f "$hostfile") ]]; then
    hostfile="hostfile"
fi

#Creates the pipe to communicate with watchdog process.
pipe=$(createpipe)
trap 'rm -f $pipe' EXIT

# If the hostfile does not exist, then it shall be created.
if [[ ! -f "$hostfile" ]]; then
    ./hostfinder --watchdog --file $hostfile >$pipe &
    src/watchdog.sh $! keep <$pipe
fi

# Run the main project software.
mpirun -q --hostfile $hostfile obj/msa ${msaargs[@]} > $pipe &
src/watchdog.sh $! <$pipe

# Waits for any undesired "killed" message and throws it away.
wait $! 2>/dev/null
