#!/usr/bin/env bash
# Multiple Sequence Alignment controller script.
# @author Rodrigo Siqueira <rodriados@gmail.com>
# @copyright 2018-2019 Rodrigo Siqueira

# The current software version
readonly version="0.1.1"

# Including helping script functions.
source src/utils.sh

# Lists all available command line options and shows information about them,
# letting the user know what is the use of this script.
showhelp()
{
    echo "Usage: msarun [options] files..."
    echo "Options:"
    echo "  -h, --help                  Prints this information."
    echo "  -v, --version               Prints the software version."
    echo "  -m, --multigpu              Try to use multiple devices in a single host."
    echo "  -r, --report-only           Indicates whether only time reports should be printed"
    echo "  -x, --matrix    <matrix>    The scoring matrix to use for alignment."
    echo "  -f, --hostfile  <hostfile>  Use or generate the given cluster configuration file."
    echo "  -1, --pairwise  <algorithm> The algorithm to use in pairwise module."
    echo "  -2, --phylogeny <algorithm> The algorithm to use in phylogeny module."
}

# Shows the current software version. This message is always shown during the application's
# startup, unless it's running on report only mode.
showversion()
{
    echo "$(style bold "Multiple Sequence Alignment ($version)")"
}

# Initializing command line variables and flags
hostfile=
positional=()
reportonly=false

# Parses the command line options and sets all respective variables. Any positional
# value unlinked to any option sent will also be captured.
while [ $# -gt 0 ]; do
    case $1 in
        -h | --help         ) showhelp;             exit  0 ;;
        -v | --version      ) showversion;          exit  0 ;;
        -f | --hostfile     ) hostfile="$2";        shift 2 ;;
        -r | --report-only  ) reportonly=true;      shift   ;;
        *                   ) positional+=("$1");   shift   ;;
    esac
done

# Prints out the software's version information.
if [[ "$reportonly" == false ]]; then
    showversion
fi

# Discovers the name of hostfile to be used. If no valid file name is given,
# the name is defaulted to "hostfile".
if [[ -z "$hostfile" || (-e "$hostfile" && ! -f "$hostfile") ]]; then
    hostfile=".hostfile"
fi

# Creates a pipe to communicate with the processes' watchdog.
pipe=$(makepipe)
trap "rm -f $pipe" EXIT

# If the hostfile does not exist, then it shall be created.
if [[ ! -f "$hostfile" || ! -s "$hostfile" ]]; then
    # Initializes the scan for hosts in network in backgound and redirects its
    # output to a watchdog process. After the operation is over, the pipe will be
    # automatically deleted.
    src/hostfinder.sh $hostfile > $pipe &
    src/watchdog.sh $! < $pipe
fi

# Run the main project software
if [[ "$reportonly" == false ]]; then
    mpirun -q --hostfile $hostfile bin/msa ${positional[@]} > $pipe &
    src/watchdog.sh $! < $pipe
else
    mpirun -q --hostfile $hostfile bin/msa --report-only ${positional[@]} > $pipe &
    src/watchdog.sh $! --report-only < $pipe
fi

# Waits up for any undesired killed-process report message and throws it away.
wait $! 2> /dev/null
