#!/usr/bin/env bash

# Command to check whether a host is compute capable or not.
gpucmd="lspci | grep 'VGA' | grep 'NVIDIA'"

# Checks whether a host has a compute capable device. This is done by simply
# connecting to the host and executing a command to check whether it is compute
# capable or not.
sshrun() {
    ssh -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=no -T $1 << EOF
        ${gpucmd} | wc -l
        exit
EOF
}

# Automatically generates a hostfile for MPI execution. This script only
# looks for GPU capable machines in local networks. If the user desires to
# to use external nodes, the file shall be created manually.
genfile() {
    # Gets the list of hosts known by the current machine.
    local hosts_list=$(getent hosts | cut -d' ' -f1 | tr "\n" " ")
    local accepted_hosts=()

    # Discovers the name of file to be created. If no valid file name is given,
    # the name is defaulted to "hostfile".
    if [[ ! -z "$1" && (! -e "$1" || -f "$1") ]]; then
        local target_file="$1"
    else
        local target_file="hostfile"
    fi

    # Removes the target file, if it exists and shifts the command line arguments.
    # This is needed so we can guarantee we will append to an empty file.
    if [[ -f "$target_file" ]]; then
        rm $target_file
    fi

    # Discovers the internal network IP of this machine.
    local gateway=$(route -n | awk '$4 == "UG" {print $2}')
    local ip_local=$(ip route get ${gateway} | awk '{print $NF; exit}')

    # Iterating through the list of hosts to try to find hosts capable of running
    # the software. As MPI uses ssh internally to implement communication between
    # nodes, we use ssh as well to look for hosts.
    for host in ${hosts_list[@]}; do
        # Checking for local hosts only. We do not want to use external nodes when
        # executing. The user shall create the hosts file manually otherwise.
        if [[ "$ip_local" != "$host" && ("$host" == 192.168.* || "$host" == 10.*) ]]; then
            if [[ $(sshrun $host 2> /dev/null) -gt 0 ]]; then
                accepted_hosts+=($host)
            fi
        fi
    done

    # From the accepted hosts, we now create the host file. If no host has been found
    # in the network, the file simply specifies the number of nodes to run in the local
    # machine.
    if [[ ${#accepted_hosts[@]} -gt 0 ]]; then
        # Checking whether the current machine is compute capable as well. If it is,
        # add a slot so one is a worker and the other is the controller.
        if [[ $(eval "$gpucmd" | wc -l) -gt 0 ]]; then
            echo "localhost slots=2 max-slots=2" >> $target_file
        else
            echo "localhost slots=1 max-slots=1" >> $target_file
        fi

        # Prints all accepted hosts in the file. Each host found will contribute with
        # a single slot worker, as we cannot (yet) figure out how many devices each
        # host has.
        for host in ${accepted_hosts[@]}; do
            echo "$host slots=1 max-slots=1" >> $target_file
        done

    # If we could not find any compute capable device, then we will check whether this
    # machine is compute capable and check how many devices it currently has.
    else
        # Counts how many slots we can give the local host.
        count=$(eval "$gpucmd" | wc -l)
        
        if [[ "$count" -gt 0 ]]; then
            echo "localhost slots=$((count + 1)) max-slots=$((count + 1))" >> $target_file
        fi
    fi
}

# Starts the script and tries to create the requested host file.
genfile
